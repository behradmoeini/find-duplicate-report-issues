# -*- coding: utf-8 -*-
"""Copy of Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OqqU-bOiuV34kGxUymwh_jlHhOUW2Lc
"""

#!wget https://github.com/logpai/bugrepo/blob/master/Firefox/mozilla_firefox.zip?raw=true
#!wget https://raw.githubusercontent.com/logpai/bugrepo/master/Firefox/train.csv
#!wget https://raw.githubusercontent.com/logpai/bugrepo/master/Firefox/test.csv

#!unzip mozilla_firefox.zip?raw\=true
#!rm mozilla_firefox.zip?raw\=true

import csv
import re

with open('mozilla_firefox.csv', newline='') as f:
    reader = csv.reader(f)
    data = list(reader)

text_from_id_dict = dict()
reports = set()
for line in data:
    try:
      w = re.sub("[\(\[].*?[\)\]]", " ", line[4] + ' ' + line[5])
      w = re.sub("http\S", " ", w)
      w = re.sub(":", " ", w)
      w = re.sub(";", " ", w)
      w = re.sub("@", " ", w)
      w = re.sub("/", " ", w)
      w = re.sub("-", " ", w)
      w = re.sub(">", " ", w)
      w = re.sub("=", " ", w)
      w = re.sub("#", " ", w)
      
      w = re.sub("  "," ",w)
      text_from_id_dict[line[0]] = w
      reports.add(w)
    except: 
      print(line[4] + ' ' + line[5])
      break
reports = list(reports)

"""duplicated_text_dict = dict()

for line in duplicate:
    if line[1] != 'NULL':
        lst = line[1].split(";")
        if not line[0] in text_from_id_dict:
          continue
        duplicated_text_dict[text_from_id_dict[line[0]]] = []
        for it in lst:
            if not it in text_from_id_dict:
              continue 
            duplicated_text_dict[text_from_id_dict[line[0]]].append(text_from_id_dict[it])"""

#!pip install -U sentence-transformers
#!pip3 install pickle5

#import pickle5 as pickle
import pickle
import json
import os
from sentence_transformers import SentenceTransformer, util

#model_names = ['distilbert-base-nli-stsb-quora-ranking', 'stsb-roberta-large', 'stsb-roberta-base', 'paraphrase-distilroberta-base-v1', 'distilbert-base-nli-stsb-mean-tokens']
model_names = ['distilbert-base-nli-stsb-quora-ranking']
from sentence_transformers import SentenceTransformer, util

with open('reports.pickle', 'wb') as handle:
  pickle.dump(reports, handle, protocol=pickle.HIGHEST_PROTOCOL)


with open('text_from_id_dict.pickle', 'wb') as handle:
  pickle.dump(text_from_id_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)

for model_name in model_names:

  model = SentenceTransformer(model_name)

  # Single list of sentences - Possible tens of thousands of sentences
  """sentences = ['The cat sits outside',
              'A man is playing guitar',
              'I love pasta',
              'The new movie is awesome',
              'The cat plays in the garden',
              'A woman watches TV',
              'The new movie is so great',
              'Do you like pizza?']"""

  sentences = reports

  paraphrases = util.paraphrase_mining(model, sentences)
  print("Result for " + model_name + ":")
  for paraphrase in paraphrases[0:10]:
      score, i, j = paraphrase
      print("{} \t\t {} \t\t Score: {:.4f}".format(sentences[i], sentences[j], score))
  with open('paraphrases-' + model_name+'.pickle', 'wb') as handle:
    pickle.dump(paraphrases, handle, protocol=pickle.HIGHEST_PROTOCOL)



paraphrases_dict = dict()

for paraphrase in paraphrases:
    score, i, j = paraphrase
    if score > 0.8:
        if not str(i) in paraphrases_dict.keys():
                paraphrases_dict[str(i)] = []
        if not str(j) in paraphrases_dict.keys():
                paraphrases_dict[str(j)] = []
        paraphrases_dict[str(i)].append(str(j))
        paraphrases_dict[str(j)].append(str(i))


import csv
from tqdm import tqdm

with open('test.csv', newline='') as f:
    reader = csv.reader(f)
    duplicate = list(reader)

recall_rate_n = 5
similar_found_count = 0
similar_trainlist_count = 0
c1 = 0
c2 = 0
c3 = 0
c4 = 0
for l in tqdm(duplicate[1:1000]):
    if l[1] == 'NULL':
        continue
    lst = l[1].split(";")
    #lst = lst[:min(recall_rate_n, len(lst))]
    if not l[0] in text_from_id_dict.keys():
        c4 += 1
        continue
    
    for it in lst:
        if not it in text_from_id_dict.keys():
            #print()
            c1 += 1
            continue
        if not text_from_id_dict[l[0]] in list(paraphrases_dict.keys()):
            similar_trainlist_count -= 1
            c2 += 1
            continue
        if text_from_id_dict[it] in paraphrases_dict[text_from_id_dict[l[0]]]:
            c3 += 1
            similar_found_count += 1
    similar_trainlist_count += len(lst)
print("similar", similar_found_count, similar_trainlist_count)

print(c1, c2, c3, c4)
